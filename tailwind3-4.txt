 A transição do Tailwind CSS v3 para o v4 trouxe mudanças significativas, especialmente na forma como as configurações
  personalizadas (como cores, fontes e breakpoints) são tratadas. Enquanto o v3 dependia principalmente do arquivo
  tailwind.config.js para essas customizações, o v4 adota uma abordagem mais "CSS-first", utilizando a diretiva @theme do
  PostCSS diretamente no seu arquivo CSS principal.

  Aqui está um resumo das principais diferenças e como elas foram implementadas para alcançar o resultado positivo:

  Tailwind CSS v3 vs. v4: Diferenças de Implementação Chave

   1. Cores Personalizadas (`colors` object em `tailwind.config.js` vs. `@theme` no CSS)
       * Tailwind v3: Cores personalizadas eram definidas no objeto colors dentro de theme.extend em tailwind.config.js.
         Definições de cores aninhadas (ex: light: { background: '#...' }) geravam automaticamente classes de utilidade
         como bg-light-background.
       * Tailwind v4: O objeto colors em tailwind.config.js está amplamente depreciado para a geração de classes de
         utilidade de cores personalizadas. Em vez disso, as cores personalizadas devem ser definidas como variáveis CSS
         dentro de um bloco @theme no seu arquivo CSS principal (ex: src/index.css). Essas variáveis são tipicamente
         prefixadas com --color- (ex: --color-primary: #c0392b;). Uma vez definidas dessa forma, o Tailwind v4 gera
         automaticamente classes de utilidade como bg-primary, text-light-background, etc.
       * Implementação:
           * Removemos o objeto colors de tailwind.config.js.
           * Adicionamos um bloco @theme a src/index.css, definindo todas as cores personalizadas como variáveis CSS (ex:
             --color-primary: #c0392b;, --color-light-background: #dfdfdf;).

   2. Fontes Personalizadas (`fontFamily` object em `tailwind.config.js` vs. `@theme` no CSS)
       * Tailwind v3: Famílias de fontes personalizadas eram definidas no objeto fontFamily dentro de theme.extend em
         tailwind.config.js. Isso gerava classes de utilidade como font-sans, font-serif.
       * Tailwind v4: Similar às cores, as fontes personalizadas agora são definidas como variáveis CSS dentro do bloco
         @theme no seu arquivo CSS principal (ex: --font-sans: 'Nunito', sans-serif;).
       * Implementação:
           * Removemos o objeto fontFamily de tailwind.config.js.
           * Adicionamos definições de fonte ao bloco @theme em src/index.css (ex: --font-sans: 'Nunito', sans-serif;).

   3. Breakpoints Personalizados (`screens` object em `tailwind.config.js` vs. `@theme` no CSS)
       * Tailwind v3: Breakpoints personalizados eram definidos no objeto screens dentro de theme.extend em
         tailwind.config.js. Isso habilitava variantes responsivas como sm:, md:, lg:.
       * Tailwind v4: Breakpoints também são agora definidos como variáveis CSS dentro do bloco @theme no seu arquivo CSS
         principal (ex: --breakpoint-sm: 481px;).
       * Implementação:
           * Removemos o objeto screens de tailwind.config.js.
           * Adicionamos definições de breakpoint ao bloco @theme em src/index.css (ex: --breakpoint-sm: 481px;).

  Outras Correções Chave para uma Transição Suave:

  Além das mudanças de configuração do v3 para o v4, várias outras questões foram cruciais para alcançar o resultado
  visual desejado:

   * Configuração do PostCSS (`postcss.config.js`): O Tailwind CSS v4 depende muito do PostCSS. Inicialmente, o arquivo
     postcss.config.js estava ausente, impedindo o Tailwind de processar suas diretivas. Ele foi então atualizado para usar
     o plugin correto @tailwindcss/postcss e autoprefixer, garantindo a geração adequada do CSS.
   * Estilos Globais Conflitantes: O arquivo index.html tinha classes de utilidade Tailwind conflitantes diretamente na tag
     <body>, que sobrescreviam os estilos globais definidos em src/index.css. Essas classes foram removidas para permitir
     que os estilos @layer base tivessem efeito.
   * Elemento Pai do Layout de Grid: O layout de grid principal foi inicialmente aplicado à tag <body>, mas a aplicação
     React renderiza em uma <div id="root">. A definição do grid foi movida do body para #root em src/index.css para
     garantir que o contexto do grid fosse aplicado corretamente ao pai dos componentes principais da aplicação.
   * Reset Básico de HTML/Body: height: 100%;, margin: 0;, padding: 0; explícitos foram adicionados a html e body em
     src/index.css para garantir a altura total da viewport e evitar que estilos padrão do navegador interferissem.

  Ao abordar sistematicamente essas mudanças e garantir a configuração correta para a nova abordagem "CSS-first" do
  Tailwind CSS v4, o projeto agora aplica corretamente todos os estilos, incluindo cores personalizadas, fontes, grids
  responsivos e animações, alcançando um resultado positivo e visualmente idêntico à implementação SCSS original.
